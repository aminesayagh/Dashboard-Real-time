networks:
  realtime_dash_network:
    driver: bridge
  
services:
  mongo:
    image: mongo:7.0.3
    container_name: realtime_dash_mongo
    restart: unless-stopped # Restart the container unless it is stopped by the user
    volumes: 
      - mongo_data:/data/db # Persist data across container restarts, mongo_data is the volume name on the host machine, /data/db is the path in the container
      - ./mongo/mongod.conf:/etc/mongod.conf # Mount the mongod.conf file to the container
      - ./mongo/keyfile:/data/keyfile # Mount the keyfile to the container
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js # Mount the init-mongo.js file to the container
      - ./${SCRIPT_INTERNAL_DIR}:scripts # Mount scripts directory to the container
    networks:
      - realtime_dash_network
    env_file:
      - .${NODE_ENV}.env
    ports:
      - "${MONGO_PORT}:27017"
    command: ["mongod", "--config", "/etc/mongod.conf", "--auth"] # Start the mongod process with the configuration file and enable authentication
    healthcheck:
      test: ['CMD-SHELL', 'scripts/healthcheck-mongo.sh']
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  redis:
    image: redis:7.0.0
    container_name: realtime_dash_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6380"
    volumes:
      - redis_data:/data
      - ./${SCRIPT_INTERNAL_DIR}:scripts
    networks:
      - realtime_dash_network
    env_file:
      - .${NODE_ENV}.env
    sysctls:
      - net.core.somaxconn=511 # Increase the maximum number of connections
      - vm.overcommit_memory=1 # Enable overcommit memory to avoid OOM killer issues
    healthcheck:
      test: ['CMD-SHELL', 'scripts/healthcheck-redis.sh']
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  api: 
    build: ${APPLICATION_SERVICE_FOLDER}/api # Build the image from the Dockerfile in the api directory
    container_name: realtime_dash_api
    restart: unless-stopped
    ports:
      - "${API_PORT}:3001"
    volumes:
      - ${APPLICATION_SERVICE_FOLDER}/api:/usr/src/app # Mount application code
      - .${SCRIPT_INTERNAL_DIR}:/scripts
    networks:
      - realtime_dash_network
    env_file:
      - .${NODE_ENV}.env
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'scripts/healthcheck-api.sh']
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  dash:
    build: ${APPLICATION_SERVICE_FOLDER}/dash
    container_name: realtime_dash_dash
    restart: unless-stopped
    ports:
      - "${DASH_PORT}:3000"
    volumes:
      - ${APPLICATION_SERVICE_FOLDER}/dash:/usr/src/app
      - ./${SCRIPT_INTERNAL_DIR}:/scripts
    networks:
      - realtime_dash_network
    env_file:
      - .${NODE_ENV}.env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'scripts/healthcheck-dash.sh']
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local